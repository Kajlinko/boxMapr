widebox <- box %>% tidyr::pivot_wider(names_from = box_times, values_from = box_times)
View(widebox)
replace_with_length <- function(df) {
df %>%
mutate(across(everything(), ~ sapply(.x, length)))
}
widebox[,-1] <- replace_with_length(widebox[,-1])
View(widebox)
get_element_name <- function(lst, index) {
if (is.null(names(lst))) {
return(NULL)
} else {
return(names(lst)[index])
}
}
find_index_in_dfs <- function(lst, target) {
for (df_index in seq_along(lst)) {
df <- lst[[df_index]]
for (row in 1:nrow(df)) {
for (col in 1:ncol(df)) {
cell_value <- df[row, col]
if (is.na(cell_value)) {
next  # Skip NA values
}
if (is.character(cell_value) && cell_value == target) {
return(list(box = get_element_name(box_list, df_index), row = row, col = col))
}
}
}
}
return(NULL)
}
find_index_in_dfs(box_list, "IMPAC285 ADM")
# unique_samples <- unique(paste(box_ids, box_times))
index_lists <- lapply(samples, function(target) {
find_index_in_dfs(box_list, target)
})
convert_list_to_df <- function(my_list) {
purrr::imap_dfr(my_list, ~ {
tibble(
sample = .y,
box = .x$box,
row = .x$row,
col = .x$col
)
})
}
View(transpose(as.data.frame(index_lists)))
df_indices <- convert_list_to_df(index_lists)
df_indices <- arrange(df_indices, sample)
View(df_indices)
# unique_samples <- unique(paste(box_ids, box_times))
index_lists <- lapply(samples, function(target) {
find_index_in_dfs(box_list, target)
})
View(index_lists)
get_element_name <- function(lst, index) {
if (is.null(names(lst))) {
return(NULL)
} else {
return(names(lst)[index])
}
}
find_index_in_dfs <- function(lst, target) {
for (df_index in seq_along(lst)) {
df <- lst[[df_index]]
for (row in 1:nrow(df)) {
for (col in 1:ncol(df)) {
cell_value <- df[row, col]
if (is.na(cell_value)) {
next  # Skip NA values
}
if (is.character(cell_value) && cell_value == target) {
return(list(box = get_element_name(box_list, df_index), row = row, col = col))
}
}
}
}
return(NULL)
}
find_index_in_dfs(box_list, "IMPAC285 ADM")
# unique_samples <- unique(paste(box_ids, box_times))
index_lists <- lapply(samples, function(target) {
find_index_in_dfs(box_list, target)
})
View(index_lists)
names(index_lists) <- samples
convert_list_to_df <- function(my_list) {
purrr::imap_dfr(my_list, ~ {
tibble(
sample = .y,
box = .x$box,
row = .x$row,
col = .x$col
)
})
}
df_indices <- convert_list_to_df(index_lists)
df_indices <- arrange(df_indices, sample)
df_indices
runApp('boxmappr')
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
library(purrr)
runApp()
find_all_indices_in_dfs <- function(lst, target) {
indices <- list()
for (df_index in seq_along(lst)) {
df <- lst[[df_index]]
for (row in 1:nrow(df)) {
for (col in 1:ncol(df)) {
cell_value <- df[row, col]
if (is.na(cell_value)) {
next  # Skip NA values
}
if (is.character(cell_value) && cell_value == target) {
indices <- append(indices, list(list(box = get_element_name(lst, df_index), row = row, col = col)))
}
}
}
}
return(indices)
}
find_indices_in_dfs <- function(lst, target) {
indices <- list()
for (df_index in seq_along(lst)) {
df <- lst[[df_index]]
for (row in 1:nrow(df)) {
for (col in 1:ncol(df)) {
cell_value <- df[row, col]
if (is.na(cell_value)) {
next  # Skip NA values
}
if (is.character(cell_value) && cell_value == target) {
indices <- append(indices, list(list(box = get_element_name(lst, df_index), row = row, col = col)))
}
}
}
}
return(indices)
}
find_indices_in_dfs <- function(lst, target) {
indices <- list()
for (df_index in seq_along(lst)) {
df <- lst[[df_index]]
for (row in 1:nrow(df)) {
for (col in 1:ncol(df)) {
cell_value <- df[row, col]
if (is.na(cell_value)) {
next  # Skip NA values
}
if (is.character(cell_value) && cell_value == target) {
indices <- append(indices, list(list(box = get_element_name(lst, df_index), row = row, col = col)))
}
}
}
}
return(indices)
}
index_lists <- lapply(samples, function(target) {
find_indices_in_dfs(box_list, target)
})
FILEPATH <- "/Users/kyle/Dropbox/LiverpoolUniversity_MLW/BRAINVIEW/FlowData_Cytodelics/CYTODELICS_BOXMAPS/Glasgow_CytodelicsBoxmaps.xlsx"
library(dplyr)
sheets <- readxl::excel_sheets(FILEPATH)
box_list <- lapply(sheets, FUN = function(sheet) {
box_list <- list()
xl <- readxl::read_xlsx(FILEPATH, sheet = sheet, col_names = FALSE)
box_list <- append(box_list, xl)
return(box_list)
})
names(box_list) <- sheets
for(box in seq_along(box_list)) {
box_list[[box]] <- as.data.frame(box_list[[box]])
}
for(box in seq_along(box_list)) {
if(ncol(box_list[[box]]) == 9) {
colnames(box_list[[box]]) <- 1:9
} else if(ncol(box_list[[box]]) == 12) {
colnames(box_list[[box]]) <- LETTERS[1:12]
}
}
prependr <- function(x, prefix) {
if (grepl("^[0-9]", x)) {
return(paste0(prefix, x))
}
# if (is.na(x)) {
#   return("EMPTY NONE")
# }
return(x)
}
prefix <- "IMPAC"
prepend_df <- function(df, prefix) {
df %>%
mutate(across(everything(), ~ sapply(.x, prependr, prefix)))
}
box_list <- lapply(box_list, prepend_df, prefix)
samples <- character(length = 0L)
box_ids <- character(length = 0L)
box_times <- character(length = 0L)
# all boxes
for(box in box_list) {
box <- unlist(box, use.names = FALSE)
samples <- append(samples, box)
box_ids <- append(box_ids, stringr::word(box, 1))
box_times <- append(box_times, stringr::word(box, 2))
}
box_times[is.na(box_times)] <- "ADM"
box <- data.frame(box_ids, box_times)
samples <- unique(samples)
samples <- na.omit(samples)
widebox <- box %>% tidyr::pivot_wider(names_from = box_times, values_from = box_times)
replace_with_length <- function(df) {
df %>%
mutate(across(everything(), ~ sapply(.x, length)))
}
widebox[,-1] <- replace_with_length(widebox[,-1])
get_element_name <- function(lst, index) {
if (is.null(names(lst))) {
return(NULL)
} else {
return(names(lst)[index])
}
}
find_index_in_dfs <- function(lst, target) {
for (df_index in seq_along(lst)) {
df <- lst[[df_index]]
for (row in 1:nrow(df)) {
for (col in 1:ncol(df)) {
cell_value <- df[row, col]
if (is.na(cell_value)) {
next  # Skip NA values
}
if (is.character(cell_value) && cell_value == target) {
return(list(box = get_element_name(box_list, df_index), row = row, col = col))
}
}
}
}
return(NULL)
}
find_indices_in_dfs <- function(lst, target) {
indices <- list()
for (df_index in seq_along(lst)) {
df <- lst[[df_index]]
for (row in 1:nrow(df)) {
for (col in 1:ncol(df)) {
cell_value <- df[row, col]
if (is.na(cell_value)) {
next  # Skip NA values
}
if (is.character(cell_value) && cell_value == target) {
indices <- append(indices, list(list(box = get_element_name(lst, df_index), row = row, col = col)))
}
}
}
}
return(indices)
}
index_lists <- lapply(samples, function(target) {
find_indices_in_dfs(box_list, target)
})
View(index_lists)
names(index_lists) <- samples
View(index_lists)
convert_list_to_df <- function(my_list) {
purrr::imap_dfr(my_list, ~ {
tibble(
sample = .y,
box = .x$box,
row = .x$row,
col = .x$col
)
})
}
df_indices <- convert_list_to_df(index_lists)
df_indices <- arrange(df_indices, sample)
View(df_indices)
# unique_samples <- unique(paste(box_ids, box_times))
index_lists <- lapply(samples, function(target) {
find_index_in_dfs(box_list, target)
})
names(index_lists) <- samples
View(index_lists)
find_indices_in_dfs <- function(lst, target) {
indices <- list()
for (df_index in seq_along(lst)) {
df <- lst[[df_index]]
for (row in 1:nrow(df)) {
for (col in 1:ncol(df)) {
cell_value <- df[row, col]
if (is.na(cell_value)) {
next  # Skip NA values
}
if (is.character(cell_value) && cell_value == target) {
indices <- append(indices, list(list(box = get_element_name(lst, df_index), row = row, col = col)))
}
}
}
}
return(indices)
}
FILEPATH <- "/Users/kyle/Dropbox/LiverpoolUniversity_MLW/BRAINVIEW/FlowData_Cytodelics/CYTODELICS_BOXMAPS/Glasgow_CytodelicsBoxmaps.xlsx"
FILEPATH2 <- "/Users/kyle/Dropbox/LiverpoolUniversity_MLW/BRAINVIEW/FlowData_Cytodelics/CYTODELICS_BOXMAPS/Malawi_CytodelicsBoxmaps.xlsx"
library(dplyr)
sheets <- readxl::excel_sheets(FILEPATH)
box_list <- lapply(sheets, FUN = function(sheet) {
box_list <- list()
xl <- readxl::read_xlsx(FILEPATH, sheet = sheet, col_names = FALSE)
box_list <- append(box_list, xl)
return(box_list)
})
names(box_list) <- sheets
sheets <- readxl::excel_sheets(FILEPATH2)
box_list2 <- lapply(sheets, FUN = function(sheet) {
box_list <- list()
xl <- readxl::read_xlsx(FILEPATH2, sheet = sheet, col_names = FALSE)
box_list <- append(box_list, xl)
return(box_list)
})
names(box_list2) <- sheets
box_list <- append(box_list, box_list2)
for(box in seq_along(box_list)) {
box_list[[box]] <- as.data.frame(box_list[[box]])
}
for(box in seq_along(box_list)) {
if(ncol(box_list[[box]]) == 9) {
colnames(box_list[[box]]) <- 1:9
} else if(ncol(box_list[[box]]) == 12) {
colnames(box_list[[box]]) <- LETTERS[1:12]
}
}
prependr <- function(x, prefix) {
if (grepl("^[0-9]", x)) {
return(paste0(prefix, x))
}
# if (is.na(x)) {
#   return("EMPTY NONE")
# }
return(x)
}
prefix <- "IMPAC"
prepend_df <- function(df, prefix) {
df %>%
mutate(across(everything(), ~ sapply(.x, prependr, prefix)))
}
box_list <- lapply(box_list, prepend_df, prefix)
samples <- character(length = 0L)
box_ids <- character(length = 0L)
box_times <- character(length = 0L)
# all boxes
for(box in box_list) {
box <- unlist(box, use.names = FALSE)
samples <- append(samples, box)
box_ids <- append(box_ids, stringr::word(box, 1))
box_times <- append(box_times, stringr::word(box, 2))
}
box_times[is.na(box_times)] <- "ADM"
box <- data.frame(box_ids, box_times)
samples <- unique(samples)
samples <- na.omit(samples)
widebox <- box %>% tidyr::pivot_wider(names_from = box_times, values_from = box_times)
replace_with_length <- function(df) {
df %>%
mutate(across(everything(), ~ sapply(.x, length)))
}
widebox[,-1] <- replace_with_length(widebox[,-1])
get_element_name <- function(lst, index) {
if (is.null(names(lst))) {
return(NULL)
} else {
return(names(lst)[index])
}
}
find_index_in_dfs <- function(lst, target) {
for (df_index in seq_along(lst)) {
df <- lst[[df_index]]
for (row in 1:nrow(df)) {
for (col in 1:ncol(df)) {
cell_value <- df[row, col]
if (is.na(cell_value)) {
next  # Skip NA values
}
if (is.character(cell_value) && cell_value == target) {
return(list(box = get_element_name(box_list, df_index), row = row, col = col))
}
}
}
}
return(NULL)
}
find_indices_in_dfs <- function(lst, target) {
indices <- list()
for (df_index in seq_along(lst)) {
df <- lst[[df_index]]
for (row in 1:nrow(df)) {
for (col in 1:ncol(df)) {
cell_value <- df[row, col]
if (is.na(cell_value)) {
next  # Skip NA values
}
if (is.character(cell_value) && cell_value == target) {
indices <- append(indices, list(list(box = get_element_name(lst, df_index), row = row, col = col)))
}
}
}
}
return(indices)
}
index_lists <- lapply(samples, function(target) {
find_indices_in_dfs(box_list, target)
})
View(index_lists)
names(index_lists) <- samples
View(index_lists)
convert_list_to_df <- function(my_list) {
purrr::imap_dfr(my_list, ~ {
tibble(
sample = .y,
box = .x$box,
row = .x$row,
col = .x$col
)
})
}
df_indices <- convert_list_to_df(index_lists)
View(df_indices)
convert_list_to_df <- function(my_list) {
purrr::imap_dfr(my_list, ~ {
tibble(
sample = .y,
box = sapply(.x, `[[`, "box"),
row = sapply(.x, `[[`, "row"),
col = sapply(.x, `[[`, "col")
)
}) %>%
unnest(c(box, row, col))
}
df_indices <- convert_list_to_df(index_lists)
convert_list_to_df <- function(my_list) {
purrr::imap_dfr(my_list, ~ {
tibble(
sample = .y,
box = sapply(.x, `[[`, "box"),
row = sapply(.x, `[[`, "row"),
col = sapply(.x, `[[`, "col")
)
}) %>%
purrr::unnest(c(box, row, col))
}
df_indices <- convert_list_to_df(index_lists)
convert_list_to_df <- function(my_list) {
purrr::imap_dfr(my_list, ~ {
tibble(
sample = .y,
box = sapply(.x, `[[`, "box"),
row = sapply(.x, `[[`, "row"),
col = sapply(.x, `[[`, "col")
)
}) %>%
map::unnest(c(box, row, col))
}
df_indices <- convert_list_to_df(index_lists)
convert_list_to_df <- function(my_list) {
purrr::imap_dfr(my_list, ~ {
tibble(
sample = .y,
box = sapply(.x, `[[`, "box"),
row = sapply(.x, `[[`, "row"),
col = sapply(.x, `[[`, "col")
)
}) %>%
tidyr::unnest(c(box, row, col))
}
df_indices <- convert_list_to_df(index_lists)
View(df_indices)
df_indices <- arrange(df_indices, sample)
library(tidyr)
runApp()
for(box in seq_along(box_list)) {
if(ncol(box_list[[box]]) == 9) {
colnames(box_list[[box]]) <- 1:9
nr <- 1:nrow(box_list[[box]])
rn <- 1 + 9*(nr-1)
print(rn)
} else if(ncol(box_list[[box]]) == 12) {
colnames(box_list[[box]]) <- LETTERS[1:12]
}
}
for(box in seq_along(box_list)) {
if(ncol(box_list[[box]]) == 9) {
colnames(box_list[[box]]) <- 1:9
nr <- 1:nrow(box_list[[box]])
rn <- 1 + 9*(nr-1)
rownames(box_list[[box]]) <- rn
} else if(ncol(box_list[[box]]) == 12) {
colnames(box_list[[box]]) <- LETTERS[1:12]
rownames(box_list[[box]]) <- 1:nrow(box_list[[box]])
}
}
View(box_list)
box_list$A
runApp()
